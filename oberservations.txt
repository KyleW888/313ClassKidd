# Observations for addmatsSimple.c and addmats.cpp
## Array Declarations

In the C code, you define arrays via int result[5], int matrix1[5] = {1}, and int matrix2[5] = {2}.
In the assembly, the arrays are set up using memory storage instructions (e.g., movl $1, -64(%rbp) for matrix1[0] = 1, movl $2, -96(%rbp) for matrix2[0] = 2). 
individual elements are accessed via like -64(%rbp) and -96(%rbp).

## Loop
In the C code, you run a for loop(for(int i = 0; i < ARRAY_SIZE; i++)). i is declared as 0, how long to loop, and the increment size are all in the for loop. In the for loop it adds the indexes from matrix 1 and 2. The sum is stored in
result[i].

In the assembly, 
movl	$0, -4(%rbp); Sets loop index i = 0.
addl	$1, -4(%rbp); Increments the loop index i
cmpl	$4, -4(%rbp); Compare loop index to ARRAY_SIZE-1 (i < 5)
jle	.L3; If i <= 4, repeat loop
The result is then stored back in the result[i] array, at -32(%rbp,%rax,4).
